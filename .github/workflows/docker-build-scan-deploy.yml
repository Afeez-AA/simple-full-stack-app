name: trivity-workflow

on:
  push:
    branches: ci-cd 
    paths:
      - .github/workflows/docker-build-scan-deploy.yml
  workflow_dispatch:

env:
  REGISTRY: docker.io
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  FRONTEND_IMAGE: frontend-simple-app
  BACKEND_IMAGE: backend-simple-app
  IMAGE_TAG: 1.0.${{ github.run_number }}

jobs:
  build-push-docker:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v1

      - name: Log into Docker Hub
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Frontend Build & Push
      - name: Build and push Frontend image
        uses: docker/build-push-action@v2
        with:
          context: ./frontend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ env.FRONTEND_IMAGE }}:${{ env.IMAGE_TAG }}

      # Frontend Comprehensive Scanning ...
      - name: Run Trivy vulnerability scanner (Frontend - All)
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ env.FRONTEND_IMAGE }}:${{ env.IMAGE_TAG }}'
          format: 'table'
          output: 'frontend-trivy-results.txt'
          timeout: '10m'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'MEDIUM,HIGH,CRITICAL'
          security-checks: 'vuln,config,secret'

      # Frontend Critical Vulnerabilities Check
      - name: Run Trivy Check for Critical Vulnerabilities (Frontend)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ env.FRONTEND_IMAGE }}:${{ env.IMAGE_TAG }}'
          severity: 'CRITICAL'
          exit-code: '1'
          continue-on-error: false  # Will fail workflow if critical vulnerabilities found

      # Generate SARIF output for Frontend
      - name: Run Trivy for GitHub Security Tab (Frontend)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ env.FRONTEND_IMAGE }}:${{ env.IMAGE_TAG }}'
          format: 'sarif'
          output: 'frontend-trivy-results.sarif'

      # Backend Build & Push
      - name: Build and push Backend image
        uses: docker/build-push-action@v2
        with:
          context: ./backend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ env.BACKEND_IMAGE }}:${{ env.IMAGE_TAG }}

      # Backend Comprehensive Scanning
      - name: Run Trivy vulnerability scanner (Backend - All)
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ env.BACKEND_IMAGE }}:${{ env.IMAGE_TAG }}'
          format: 'table'
          output: 'backend-trivy-results.txt'
          timeout: '10m'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'MEDIUM,HIGH,CRITICAL'
          security-checks: 'vuln,config,secret'

      # Backend Critical Vulnerabilities Check
      - name: Run Trivy Check for Critical Vulnerabilities (Backend)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ env.BACKEND_IMAGE }}:${{ env.IMAGE_TAG }}'
          severity: 'CRITICAL'
          exit-code: '1'
          continue-on-error: false  # Will fail workflow if critical vulnerabilities found

      # Generate SARIF output for Backend
      - name: Run Trivy for GitHub Security Tab (Backend)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ env.BACKEND_IMAGE }}:${{ env.IMAGE_TAG }}'
          format: 'sarif'
          output: 'backend-trivy-results.sarif'

      # Save scan history
      - name: Save Trivy scan results
        if: always()
        run: |
          mkdir -p trivy-results
          echo "Scan completed on $(date)" >> trivy-results/scan-history.txt
          echo "Frontend Image: ${{ env.REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ env.FRONTEND_IMAGE }}:${{ env.IMAGE_TAG }}" >> trivy-results/scan-history.txt
          echo "Backend Image: ${{ env.REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ env.BACKEND_IMAGE }}:${{ env.IMAGE_TAG }}" >> trivy-results/scan-history.txt
          cat frontend-trivy-results.txt >> trivy-results/scan-history.txt
          cat backend-trivy-results.txt >> trivy-results/scan-history.txt

      # Upload scan results as artifacts
      - name: Upload Trivy scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-scan-results
          path: trivy-results/

      # Upload SARIF files
      - name: Upload SARIF files
        uses: github/codeql-action/upload-sarif@v4
        if: always()
        with:
          sarif_file: frontend-trivy-results.sarif
          
      - name: Upload Backend SARIF files
        uses: github/codeql-action/upload-sarif@v4
        if: always()
        with:
          sarif_file: backend-trivy-results.sarif

      # Create GitHub Issue for vulnerabilities
      - name: Create Issue for Vulnerabilities
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const frontendResults = fs.readFileSync('frontend-trivy-results.txt', 'utf8');
            const backendResults = fs.readFileSync('backend-trivy-results.txt', 'utf8');
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'ðŸš¨ Security vulnerabilities found in Docker images',
              body: `Security scan completed with findings:
              
              ## Frontend Image
              \`\`\`
              ${frontendResults}
              \`\`\`
              
              ## Backend Image
              \`\`\`
              ${backendResults}
              \`\`\`
              
              Please review these vulnerabilities and take necessary action.
              
              - Build: ${context.sha}
              - Workflow: ${context.workflow}
              - Run: ${context.runId}`
            });

  #  deploy:
  #   needs: build-push-docker
  #   runs-on: self-hosted

  #   steps:
  #     - name: Get code
  #       uses: actions/checkout@v3

  #     - name: Update Kubernetes manifests
  #       run: |
  #         cd manifest_files
  #         # Replace placeholders with actual values
  #         sed -i "s|__REGISTRY__|$REGISTRY|g" *.yaml
  #         sed -i "s|__DOCKER_USERNAME__|$DOCKER_USERNAME|g" *.yaml
  #         sed -i "s|__FRONTEND_IMAGE__|$FRONTEND_IMAGE|g" *.yaml
  #         sed -i "s|__BACKEND_IMAGE__|$BACKEND_IMAGE|g" *.yaml
  #         sed -i "s|__IMAGE_TAG__|$IMAGE_TAG|g" *.yaml

  #     - name: Deploy to Kubernetes
  #       working-directory: manifest_files
  #       run: |
  #         kubectl apply -f .
          